
<!DOCTYPE HTML>
<html>
<head>
 <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
	<title>NRCS Prime and other Important Farmlands</title>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
</head>
<style type="text/css">

<style>

<style type="text/css">

<style>

<style type="text/css">
        .scrolltable {
            overflow-x: scroll;
            height: 100%;
            display: flex;
            display: -webkit-flex;
            flex-direction: column;
            -webkit-flex-direction: column;
        }
        .scrolltable > .header {
        }
        .scrolltable > .body {
            /*noinspection CssInvalidPropertyValue*/
            width: -webkit-fit-content;
            overflow-y: scroll;
            flex: 1;
            -webkit-flex: 1;
        }
        th, td {
            min-width: 25px;
        }
        /* an outside constraint to react against */
        #constrainer {
            width: 400px;
            height: 200px;
        }
        #constrainer2 {
            width: 400px;
            overflow-x: scroll;
        }
        #constrainer2 table {
            overflow-y: scroll;
        }
        #constrainer2 tbody {
            overflow-x: scroll;
            display: block;
            height: 200px;
        }
        #constrainer2 thead {
            display: table-row;
        }
        /* only styling below here */
        #constrainer, #constrainer2 {
            border: 1px solid lightgrey;
        }
        table {
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid gray;
        }
        th {
            background-color: lightgrey;
            border-width: 1px;
        }
        td {
            border-width: 1px;
        }
        tr:first-child td {
            border-top-width: 0;
        }
        tr:nth-child(even) {
            background-color: #eee;
        }
    </style>



<body>
<!--<img src="https://websoilsurvey.sc.egov.usda.gov/App/Resources/HomePage/images/WSSMasthead4.png" alt="WSS Logo" style="width:650px;height:150px;"> -->



	<h3>Soil Data Access (SDA) Prime and other Important Farmlands</h3>
	<p>
	An SDA-populated select list is used to pick a state and SSA which enables creation of a "Prime and other Important Farmlands" based upon those selections. The data is not static; it hits Soil Data Access Live. To reset the table hit F5 on the keyboard. Once a survey is selected and table appears, if a new survey is selected it will append to the table at the bottom. 
	<a href='#reportref'> For more information about the table, </a>
	</p>
	<a name='top'>
	<!-- The following "div" tag will be updated with the retrieved data
		After the first selection the "(select a state)" will disappear -->
	<select id="selectId1" onchange="ChangeSelectedState(event)">
		<option value='' style="display: none" id="remove">(select a state)</option>
	</select>
	
	<div id="selectedStateId"><p>(no state selected)</p></div>
	
	<select id="selectId2" onchange="ChangeSelectedSSA(event)">
		<option value='' style="display: none" id="remove">(select a soil survey area)</option>
	</select>
	
	<div id="selectedSSAId"><p>(no SSA selected)</p></div>
	
	<div class="container" id="id1"></div>
	<br></br
	<b>
		<font color='red'>
			<a name='reportref'>Report Metadata:</a>
		</font>
	</b>
	<php>
		<a href='#top'>Back to top</a>
	</php>
	<ul>
	<li><b>Area_Symbol: </b>A symbol that uniquely identifies a single occurrence of a particular type of area (e.g. Dane Co., Wisconsin is WI025).</li>
	<li><b>Area_Name: </b> The name given to the specified geographic area.</li>
	<li><b>mukey: </b> A non-connotative string of characters used to uniquely identify a record in the Mapunit table.</li>
	<li><b>Mapunit_SYM: </b> The symbol used to uniquely identify the soil mapunit in the soil survey.</li>
	<li><b>Mapunit_Name: </b> Correlated name of the mapunit (recommended name or field name for surveys in progress).</li>
	<li><b>Prime and other Important Farmlands: </b> Identification of map units as prime farmland, farmland of statewide importance, or farmland of local importance.</li>
	</ul>

	<b>
		<font color='red'>
			<a name='reportref'>Prime and other Important Farmlands Description:</a>
		</font>
	</b>	
	
	


	<p>
		This table lists the map units in the survey area that are considered important farmlands. Important farmlands consist of prime farmland, unique farmland, and farmland of statewide or local importance. This list does not constitute a recommendation for a particular land use.
	</p>
	
	<p>
		In an effort to identify the extent and location of important farmlands, the Natural Resources Conservation Service, in cooperation with other interested Federal, State, and local government organizations, has inventoried land that can be used for the production of the Nation's food supply.
	</p>	
	
	<p>
	<i> Prime farmland </i> is of major importance in meeting the Nation's short- and long-range needs for food and fiber. Because the supply of high-quality farmland is limited, the U.S. Department of Agriculture recognizes that responsible levels of government, as well as individuals, should encourage and facilitate the wise use of our Nation's prime farmland
	</p>
	
	<p>
	Prime farmland, as defined by the U.S. Department of Agriculture, is land that has the best combination of physical and chemical characteristics for producing food, feed, forage, fiber, and oilseed crops and is available for these uses. It could be cultivated land, pastureland, forestland, or other land, but it is not urban or built-up land or water areas. The soil quality, growing season, and moisture supply are those needed for the soil to economically produce sustained high yields of crops when proper management, including water management, and acceptable farming methods are applied. In general, prime farmland has an adequate and dependable supply of moisture from precipitation or irrigation, a favorable temperature and growing season, acceptable acidity or alkalinity, an acceptable salt and sodium content, and few or no rocks. The water supply is dependable and of adequate quality. Prime farmland is permeable to water and air. It is not excessively erodible or saturated with water for long periods, and it either is not frequently flooded during the growing season or is protected from flooding. Slope ranges mainly from 0 to 6 percent. More detailed information about the criteria for prime farmland is available at the local office of the Natural Resources Conservation Service.</p>	
</p>

	<p>
	For some of the soils identified in the table as prime farmland, measures that overcome a hazard or limitation, such as flooding, wetness, and droughtiness, are needed. Onsite evaluation is needed to determine whether or not the hazard or limitation has been overcome by corrective measures.	</p>
</p>


<p>
	A recent trend in land use in some areas has been the loss of some prime farmland to industrial and urban uses. The loss of prime farmland to other uses puts pressure on marginal lands, which generally are more erodible, droughty, and less productive and cannot be easily cultivated.</p>
	</p>
	<p>
	<i>Unique farmland</i> is land other than prime farmland that is used for the production of specific high-value food and fiber crops, such as citrus, tree nuts, olives, cranberries, and other fruits and vegetables. It has the special combination of soil quality, growing season, moisture supply, temperature, humidity, air drainage, elevation, and aspect needed for the soil to economically produce sustainable high yields of these crops when properly managed. The water supply is dependable and of adequate quality. Nearness to markets is an additional consideration. Unique farmland is not based on national criteria. It commonly is in areas where there is a special microclimate, such as the wine country in California.
	</p>
	<p>
	In some areas, land that does not meet the criteria for prime or unique farmland is considered to be <i>farmland of statewide importance</i> for the production of food, feed, fiber, forage, and oilseed crops. The criteria for defining and delineating farmland of statewide importance are determined by the appropriate State agencies. Generally, this land includes areas of soils that nearly meet the requirements for prime farmland and that economically produce high yields of crops when treated and managed according to acceptable farming methods. Some areas may produce as high a yield as prime farmland if conditions are favorable. Farmland of statewide importance may include tracts of land that have been designated for agriculture by State law.
	</p>
	<p>
	In some areas that are not identified as having national or statewide importance, land is considered to be farmland of local importance for the production of food, feed, fiber, forage, and oilseed crops. This farmland is identified by the appropriate local agencies. Farmland of local importance may include tracts of land that have been designated for agriculture by local ordinance.
	</p>
	<script>
		var url =  "HTTPS://sdmdataaccess.sc.egov.usda.gov/tabular/post.rest";
		var stateId = "";
		// Wait for everything to be loaded before starting the first SDA request
		$(document).ready(function(){
			// Start by retrieving a state list
			var data = {
				query: "select statename, stateid from state order by statename;",
				format: "json"
			}
			$.post(url, data, function( callbackData ) {
					loadSelect("selectId1", callbackData.Table, 1, 0, "select a state");
				}, 
				"json");
		});
		
		function loadSelect(id, table, valueColumn, labelColumn, hintOption) {
			// Add options to the specified select list. The content of the table[valueColumn]
			// defines the value of the selection, the table[labelColumn] is used for the 
			// displayed option's text.
			var iRow = 0;
			$("#" + id)[0].innerHTML = "<option value='' style='display: none' id='remove'>(" + hintOption + ")</option>";
			while (iRow < table.length) {
				var row = table[iRow];
				var optionHtml = "<option value='" + row[valueColumn] + "'>" + row[labelColumn] + "</option>";
				$("#" + id).append(optionHtml);
				iRow++;
			}
		}
		
		function ChangeSelectedState(event) {
			// Update the selected state text area and then fetch SSA names and symbols
			var stateId = event.target.value;
			var notification = $("#selectedStateId");
			notification[0].innerHTML = "<p>selected stateId = " + stateId + "</p>";
			
			query =
				"SELECT distinct c.areaname, c.areasymbol "
				+ "FROM [dbo].[sastatusmap] c, [dbo].[saspatialver] s "
				+ "WHERE s.areasymbol = c.areasymbol "
				+ "AND c.areasymbol IN ("
				+ "SELECT DISTINCT l.areasymbol "
				+ "FROM [dbo].[legend] l, [dbo].[laoverlap] o "
				+ "WHERE o.lkey = l.lkey "
				+ "AND o.areatypename = 'State or Territory' "
				+ "AND o.areasymbol = '" + stateId + "' ) "
				+ "order by c.areaname, c.areasymbol;";

			var data = {
				query: query,
				format: "json"
			}
			
			$.post(url, data, function( callbackData ) {
					loadSelect("selectId2", callbackData.Table, 1, 0, "select an SSA");
				}, 
				"json");
		}
		
		function ChangeSelectedSSA(event) {
			// Update the selected SSA text area and then fetch and display report 2 results
			var ssaId = event.target.value;
			var notification = $("#selectedSSAId");
			notification[0].innerHTML = "<p>selected SSA areasymbol = " + ssaId + "</p>";
			
		query = "SELECT LEFT((areasymbol), 2) as State_Sym,  l.areasymbol as Area_Symbol, l.areaname as Area_Name, " 
+"		mu.mukey,  mu.musym as Mapunit_SYM,  mu.muname as Mapunit_Name, farmlndcl as Farm_Class "
+" FROM legend AS l INNER JOIN mapunit AS mu ON mu.lkey = l.lkey "
+" ORDER BY   l.areasymbol, mu.musym ASC, mu.muname ASC,  mu.mukey 
+"		AND  l.areasymbol = '"  + ssaId + "'"
;
			
				var data = {
				query: query,
				format: "json+columnname"
			}
			
			$.post(url, data, function( callbackData ) {
				// the success callback function: when executed add content to table
					$('#id1')[0].innerHTML = "";
					var tableHtml = '<table border="1">';
					// for each row...
					var iRow = 0;
					while (iRow < callbackData.Table.length) {
						var row = callbackData.Table[iRow];
						tableHtml += "<tr>";
						// for each column in each row...
						var iCol = 0;
						while (iCol < row.length) {
							tableHtml += "<td>" + row[iCol] + "</td>";
							iCol++;
						};
						tableHtml += "</tr>";				
						iRow++;
					};
					tableHtml += '</table>'
					$('#id1').append(tableHtml);
				}, 
				// Specify that we want the request to be sent in JSON format
				"json");			
			
				
		}
	</script>
	
<script>
$(function(){
	$('table').each(function() {
		if($(this).find('thead').length > 0 && $(this).find('th').length > 0) {
			// Clone <thead>
			var $w	   = $(window),
				$t	   = $(this),
				$thead = $t.find('thead').clone(),
				$col   = $t.find('thead, tbody').clone();

			// Add class, remove margins, reset width and wrap table
			$t
			.addClass('sticky-enabled')
			.css({
				margin: 0,
				width: '100%'
			}).wrap('<div class="sticky-wrap" />');

			if($t.hasClass('overflow-y')) $t.removeClass('overflow-y').parent().addClass('overflow-y');

			// Create new sticky table head (basic)
			$t.after('<table class="sticky-thead" />');

			// If <tbody> contains <th>, then we create sticky column and intersect (advanced)
			if($t.find('tbody th').length > 0) {
				$t.after('<table class="sticky-col" /><table class="sticky-intersect" />');
			}

			// Create shorthand for things
			var $stickyHead  = $(this).siblings('.sticky-thead'),
				$stickyCol   = $(this).siblings('.sticky-col'),
				$stickyInsct = $(this).siblings('.sticky-intersect'),
				$stickyWrap  = $(this).parent('.sticky-wrap');

			$stickyHead.append($thead);

			$stickyCol
			.append($col)
				.find('thead th:gt(0)').remove()
				.end()
				.find('tbody td').remove();

			$stickyInsct.html('<thead><tr><th>'+$t.find('thead th:first-child').html()+'</th></tr></thead>');
			
			// Set widths
			var setWidths = function () {
					$t
					.find('thead th').each(function (i) {
						$stickyHead.find('th').eq(i).width($(this).width());
					})
					.end()
					.find('tr').each(function (i) {
						$stickyCol.find('tr').eq(i).height($(this).height());
					});

					// Set width of sticky table head
					$stickyHead.width($t.width());

					// Set width of sticky table col
					$stickyCol.find('th').add($stickyInsct.find('th')).width($t.find('thead th').width())
				},
				repositionStickyHead = function () {
					// Return value of calculated allowance
					var allowance = calcAllowance();
				
					// Check if wrapper parent is overflowing along the y-axis
					if($t.height() > $stickyWrap.height()) {
						// If it is overflowing (advanced layout)
						// Position sticky header based on wrapper scrollTop()
						if($stickyWrap.scrollTop() > 0) {
							// When top of wrapping parent is out of view
							$stickyHead.add($stickyInsct).css({
								opacity: 1,
								top: $stickyWrap.scrollTop()
							});
						} else {
							// When top of wrapping parent is in view
							$stickyHead.add($stickyInsct).css({
								opacity: 0,
								top: 0
							});
						}
					} else {
						// If it is not overflowing (basic layout)
						// Position sticky header based on viewport scrollTop
						if($w.scrollTop() > $t.offset().top && $w.scrollTop() < $t.offset().top + $t.outerHeight() - allowance) {
							// When top of viewport is in the table itself
							$stickyHead.add($stickyInsct).css({
								opacity: 1,
								top: $w.scrollTop() - $t.offset().top
							});
						} else {
							// When top of viewport is above or below table
							$stickyHead.add($stickyInsct).css({
								opacity: 0,
								top: 0
							});
						}
					}
				},
				repositionStickyCol = function () {
					if($stickyWrap.scrollLeft() > 0) {
						// When left of wrapping parent is out of view
						$stickyCol.add($stickyInsct).css({
							opacity: 1,
							left: $stickyWrap.scrollLeft()
						});
					} else {
						// When left of wrapping parent is in view
						$stickyCol
						.css({ opacity: 0 })
						.add($stickyInsct).css({ left: 0 });
					}
				},
				calcAllowance = function () {
					var a = 0;
					// Calculate allowance
					$t.find('tbody tr:lt(3)').each(function () {
						a += $(this).height();
					});
					
					// Set fail safe limit (last three row might be too tall)
					// Set arbitrary limit at 0.25 of viewport height, or you can use an arbitrary pixel value
					if(a > $w.height()*0.25) {
						a = $w.height()*0.25;
					}
					
					// Add the height of sticky header
					a += $stickyHead.height();
					return a;
				};

			setWidths();

			$t.parent('.sticky-wrap').scroll($.throttle(250, function() {
				repositionStickyHead();
				repositionStickyCol();
			}));

			$w
			.load(setWidths)
			.resize($.debounce(250, function () {
				setWidths();
				repositionStickyHead();
				repositionStickyCol();
			}))
			.scroll($.throttle(250, repositionStickyHead));
		}
	});
});
</script>
</body>
</html>
	
	</script>
</body>
</html>